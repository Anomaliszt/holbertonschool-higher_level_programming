********************************
* How to use matrix_divided.py *
********************************

Function called 'My name is()'

*****************
* Import module *
*****************

>>> say_my_name = __import__('3-say_my_name').say_my_name


******************
* Initialization *
******************



**********
* Return *
**********
nothing if it is not a string


**************************
* Basic cases on success *
**************************


>>> say_my_name("Xavier", "SANCHEZ")
My name is Xavier SANCHEZ

>>> say_my_name("Xavier")
My name is Xavier

>>> say_my_name(str(123), str(456))
My name is 123 456

******************
* Cases of Error *
******************

>>> say_my_name(1.2)
Traceback (most recent call last):
TypeError: first_name must be a string

>>> say_my_name("Xavier", 123)
Traceback (most recent call last):
TypeError: last_name must be a string

>>> say_my_name(int("Xavier"), "Sanchez")
Traceback (most recent call last):
ValueError: invalid literal for int() with base 10: 'Xavier'

>>> say_my_name(123, "Xavier")
Traceback (most recent call last):
TypeError: first_name must be a string

>>> say_my_name(float("NaN"), "Xavier")
Traceback (most recent call last):
TypeError: first_name must be a string

>>> say_my_name(None, None)
Traceback (most recent call last):
TypeError: first_name must be a string

>>> say_my_name("Xavier", None)
Traceback (most recent call last):
TypeError: last_name must be a string

>>> say_my_name([50, 2])
Traceback (most recent call last):
TypeError: first_name must be a string

>>> say_my_name()
Traceback (most recent call last):
TypeError: say_my_name() missing 1 required positional argument: 'first_name'
